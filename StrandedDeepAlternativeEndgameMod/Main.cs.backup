using Beam;
using Beam.Events;
using Beam.Rendering;
using Beam.Serialization;
using Beam.Serialization.Json;
using Beam.Terrain;
using Beam.UI;
using Beam.Utilities;
using Funlabs;
using MEC;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityModManagerNet;

namespace StrandedDeepAlternativeEndgameMod
{
    static class Main
    {
        private static string ENDGAME_CARGO_NAME = "EVERGREEN";

        private static float alternativeEndingCanvasDefaultScreenWidth = 1024f;
        private static float alternativeEndingCanvasDefaultScreenHeight = 768f;

        private static bool alternativeEndingCanvasVisible = false;
        private static GameObject modCanvas;

        private static string videoFileName = "";

        private static string configFileName = "StrandedDeepAlternativeEndgameMod.config";
        private static uint cargoPrefabId = 311;
        private static List<Vector3> positions = new List<Vector3>();
        private static int currentOrigin = 0;

        internal static Dictionary<string, Texture2D> _indexedTextures = new Dictionary<string, Texture2D>();

        internal static System.Diagnostics.Stopwatch chrono = new System.Diagnostics.Stopwatch();
        private static bool perfCheck = true;

        static bool Load(UnityModManager.ModEntry modEntry)
        {
            try
            {
                chrono.Start();

                modEntry.OnUpdate = OnUpdate;
                modEntry.OnGUI = OnGUI;
                modEntry.OnHideGUI = OnHideGUI;

                ReadConfig();

                Texture2D tex = new Texture2D(1280, 1280, TextureFormat.ARGB32, false, false);
                tex.LoadImage(ExtractResource("StrandedDeepAlternativeEndgameMod.assets.textures.smoke.png"));
                _indexedTextures.Add("StrandedDeepAlternativeEndgameMod.assets.textures.smoke.png", tex);

                // write video file
                string currentPath = System.Reflection.Assembly.GetExecutingAssembly().Location;
                string modPath = Path.GetDirectoryName(currentPath);
                videoFileName = Path.Combine(modPath, "alternative_endgame.webm");
                Debug.Log("Stranded Deep AlternativeEndgame Mod writing down video in : " + videoFileName);
                File.WriteAllBytes(videoFileName, ExtractResource("StrandedDeepAlternativeEndgameMod.assets.videos.alternative_endgame.webm"));


                int radius = 250;// 120;// 170;
                int offset = 0;// 110;// (_islandSize / 2); // center of the circle
                int numberOfWaypoints = 8;
                float angle = 360.0f / numberOfWaypoints;
                for (int i = 0; i < numberOfWaypoints; i++)
                {
                    positions.Add(new Vector3(offset + radius * Mathf.Cos(Mathf.Deg2Rad * i * angle), -5, offset + radius * Mathf.Sin(Mathf.Deg2Rad * i * angle)));
                }

                Debug.Log("Stranded Deep AlternativeEndgame Mod properly loaded");

                return true;
            }
            catch (Exception e)
            {
                Debug.Log("Stranded Deep AlternativeEndgame Mod error on load : " + e);
            }
            finally
            {
                Debug.Log("Stranded Deep AlternativeEndgame Mod load time (ms) = " + chrono.ElapsedMilliseconds);
            }

            return false;
        }

        static void OnGUI(UnityModManager.ModEntry modEntry)
        {
            if (Game.State == GameState.NEW_GAME || Game.State == GameState.LOAD_GAME)
            {
                //if (GUILayout.Button("Play endgame test"))
                //{
                //    // play video
                //    PlayEngameVideo();
                //}
            }
        }

        private static void FreezePlayer(IPlayer player)
        {
            if (!player.IsOwner)
            {
                return;
            }
            Movement movement = player.Movement;
            movement.IsBusy = ++movement.IsBusy;
            player.Movement.IsInCutscene = true;
            player.Movement.CharacterController.enabled = false;
        }

        static void OnHideGUI(UnityModManager.ModEntry modEntry)
        {
            WriteConfig();
        }

        private static SaveablePrefab cargoInstance = null;
        private static StrandedWorld previousWorldInstance = null;
        private static bool worldLoaded = false;

        private static FieldInfo fi_containersGenerated = typeof(LootContainerSpawner).GetField("_containersGenerated", BindingFlags.NonPublic | BindingFlags.Instance);
        private static FieldInfo fi_dither = typeof(LodController).GetField("_dither", BindingFlags.NonPublic | BindingFlags.Instance);
        private static FieldInfo fi_localImpostorCullingDistance = typeof(LodController).GetField("_localImpostorCullingDistance", BindingFlags.NonPublic | BindingFlags.Instance);


        private static SaveablePrefab CreateSaveablePrefabLight(uint prefabId, Vector3 position, Quaternion rotation, Zone zone)
        {
            GameObject gameObject;
            MiniGuid referenceId = MiniGuid.NewFrom(position, prefabId, 48879);
            SaveablePrefab saveablePrefab = MultiplayerMng.Instantiate<SaveablePrefab>(prefabId, position, rotation, referenceId, null);
            gameObject = saveablePrefab.gameObject;
            gameObject.transform.SetParent(zone.SaveContainer, false);
            gameObject.transform.position = position;
            gameObject.transform.rotation = rotation;

            LootContainerSpawner loot = gameObject.GetComponent<LootContainerSpawner>();
            if (loot != null)
            {
                Debug.Log("Stranded Deep AlternativeEndgame Mod : loot spawner found, bypassing");
                fi_containersGenerated.SetValue(loot, true);
            }

            zone.OnObjectCreated(gameObject);
            return saveablePrefab;
        }

        private static FieldInfo fi_scope = typeof(LodController).GetField("_scope", BindingFlags.Instance | BindingFlags.NonPublic);
        private static DateTime _lastTick = DateTime.MinValue;

        static void OnUpdate(UnityModManager.ModEntry modEntry, float dt)
        {
            try
            {
                chrono.Reset();
                chrono.Start();

                if (Game.State == GameState.NEW_GAME || Game.State == GameState.LOAD_GAME)
                {
                    // anti memory leak
                    if (previousWorldInstance != null
                        && !System.Object.ReferenceEquals(previousWorldInstance, StrandedWorld.Instance))
                    {
                        Debug.Log("Stranded Deep AlternativeEndgame Mod : world instance changed, clearing events");
                        previousWorldInstance.WorldGenerated -= Instance_WorldGenerated;
                        previousWorldInstance = null;
                        worldLoaded = false;
                    }
                    // to reattach at the right moment
                    if (StrandedWorld.Instance != null
                        && !System.Object.ReferenceEquals(StrandedWorld.Instance, previousWorldInstance))
                    {
                        Debug.Log("Stranded Deep AlternativeEndgame Mod : world instance found, registering events");
                        previousWorldInstance = StrandedWorld.Instance;
                        StrandedWorld.Instance.WorldGenerated -= Instance_WorldGenerated;
                        StrandedWorld.Instance.WorldGenerated += Instance_WorldGenerated;
                    }

                    if (worldLoaded)
                    {
                        // search
                        IImpostorParent impostorParent = null;
                        LodController lc = null;
                        if (cargoInstance == null) 
                        {
                            foreach(SaveablePrefab sp in Game.FindObjectsOfType<SaveablePrefab>())
                            {
                                if (sp.name == ENDGAME_CARGO_NAME
                                    || sp.gameObject.name == ENDGAME_CARGO_NAME)
                                {
                                    Debug.Log("Stranded Deep AlternativeEndgame Mod : retrieved the endgame cargo");
                                    cargoInstance = sp;
                                    break;
                                }
                            }

                            // instanciate
                            if (cargoInstance == null) 
                            {
                                Debug.Log("Stranded Deep AlternativeEndgame Mod : spawn the endgame cargo");
                                cargoInstance = CreateSaveablePrefabLight(cargoPrefabId, positions[0], new Quaternion(), StrandedWorld.Instance.NmlZone);
                                cargoInstance.name = ENDGAME_CARGO_NAME;
                                cargoInstance.gameObject.name = ENDGAME_CARGO_NAME;
                            }

                            impostorParent = cargoInstance.GetInterface<IImpostorParent>();
                            Debug.Log("Stranded Deep AlternativeEndgame Mod : impostor parent type = " + impostorParent.GetType());
                            lc = impostorParent as Beam.Rendering.LodController;
                            Debug.Log("Stranded Deep AlternativeEndgame Mod : lod manager BIAS " + LodManager.LOD_BIAS);
                            fi_scope.SetValue(lc, ImposterScope.Manual);
                            Debug.Log("Stranded Deep AlternativeEndgame Mod : lod controller scope " + lc.Scope);
                            fi_dither.SetValue(lc, false);

                            for (int lodIndex = lc.LodGroup.Lods.Count - 1; lodIndex > 0; lodIndex--)
                            {
                                lc.LodGroup.Lods.RemoveAt(lodIndex);
                            }

                            int cull = 5000;
                            fi_localImpostorCullingDistance.SetValue(lc, cull);
                            foreach (Lod lod in lc.LodGroup.Lods)
                            {
                                Debug.Log("Stranded Deep AlternativeEndgame Mod : culling distance for cargo lod (1) before " + lod.CullingDistance);
                                lod.CullingDistance = cull;
                                cull += 500;
                                Debug.Log("Stranded Deep AlternativeEndgame Mod : culling distance for cargo lod (1) after " + lod.CullingDistance);
                            }

                            //AttachChildrenRecursive(cargoInstance.transform, cargoInstance.transform);

                            cargoInstance.gameObject.isStatic = false;
                            // working
                            cargoInstance.gameObject.SetLayerRecursively(Layers.WATER);

                            //ParticleSystem ps = cargoInstance.gameObject.AddComponent<ParticleSystem>();
                            //SmokeParticleSystem pst = cargoInstance.gameObject.AddComponent<SmokeParticleSystem>();
                            //ps.Play();
                        }
                        else
                        {
                            Event currentevent = Event.current;
                            if (currentevent.isKey)
                            {
                                if (currentevent.keyCode == KeyCode.F3)
                                {
                                    float distance = Vector3.Distance(cargoInstance.transform.position, PlayerRegistry.LocalPlayer.transform.position);
                                    Debug.Log("Stranded Deep AlternativeEndgame Mod : endgame cargo distance to player = " + distance);
                                }
                            }

                            cargoInstance.name = ENDGAME_CARGO_NAME;
                            cargoInstance.gameObject.name = ENDGAME_CARGO_NAME;

                            //Renderer r = cargoInstance.gameObject.GetComponent<Renderer>();
                            //if (r != null)
                            //{
                            //    Debug.Log("Stranded Deep AlternativeEndgame Mod : cargo renderer type : " + r.GetType().Name);
                            //    if (r is MeshRenderer)
                            //    {
                            //        Debug.Log("Stranded Deep AlternativeEndgame Mod : found cargo renderer");
                            //        r.sharedMaterial = null;
                            //        r.sharedMaterials = new Material[] { };

                            //        foreach (Material m in r.materials)
                            //        {
                            //            Texture2D magenta = new Texture2D(1, 1);
                            //            magenta.SetPixel(0, 0, Color.magenta);
                            //            m.mainTexture = magenta;
                            //        }
                            //    }
                            //}
                            //else
                            //{
                            //    Debug.Log("Stranded Deep AlternativeEndgame Mod : cargo renderer not found");
                            //}

                            if (_lastTick == DateTime.MinValue)
                            {
                                _lastTick = GameTime.Now;
                            }
                            TimeSpan deltaTime = GameTime.Now.Subtract(_lastTick);
                            if (deltaTime.TotalHours > 0)
                            {
                                float absoluteSpeed = 10.0f;
                                float delta = (float)absoluteSpeed * (float)deltaTime.TotalMinutes;
                                Quaternion rotation;
                                Vector3 nextPosition = ComputeNextPosition(currentOrigin, cargoInstance.gameObject.transform.position, delta, out rotation);
                                //Debug.Log("Stranded Deep AlternativeEndgame Mod : cargo new position = " + nextPosition);

                                #region "working"
                                cargoInstance.AllRigidbodies[0].transform.position = nextPosition;
                                cargoInstance.gameObject.transform.position = nextPosition;
                                cargoInstance.AllRigidbodies[0].transform.rotation = rotation;
                                cargoInstance.gameObject.transform.rotation = rotation;
                                #endregion

                                //cargoInstance.gameObject.transform.position = nextPosition;
                                //cargoInstance.gameObject.transform.rotation = rotation;
                                //foreach (Rigidbody rb in cargoInstance.AllRigidbodies)
                                //{
                                //    rb.transform.position = nextPosition;
                                //    rb.transform.rotation = rotation;
                                //}

                                _lastTick = GameTime.Now;
                            }

                            CheckEndgameConditions();
                            if (_playEndgame < DateTime.Now)
                            {
                                _playEndgame = DateTime.MaxValue;
                                PlayEngameVideo();
                            }
                        }
                    }
                }
                else
                {
                    Reset();
                }
            }
            catch (Exception e)
            {
                Debug.Log("Stranded Deep AlternativeEndgame Mod : error on update : " + e);
            }
            finally
            {
                if (perfCheck && chrono.ElapsedMilliseconds >= 10)
                {
                    Debug.Log("Stranded Deep AlternativeEndgame Mod update time (ms) = " + chrono.ElapsedMilliseconds);
                }
            }
        }

        private static void TestLodGroups()
        {
            foreach(Camera cam in Camera.allCameras)
            {
                Debug.Log("Stranded Deep AlternativeEndgame Mod lod tests near clip plane " + cam.name + " / " + cam.nearClipPlane);
                Debug.Log("Stranded Deep AlternativeEndgame Mod lod tests far clip plane " + cam.name + " / " + cam.farClipPlane);
                //foreach(float layer in cam.layerCullDistances)
                //if (cam.farClipPlane < 1000)
                //    cam.farClipPlane = 1000;
            }

            IImpostorParent impostorParenttest = cargoInstance.GetInterface<IImpostorParent>();
            LodController lctest = impostorParenttest as LodController;
            Vector3 position = PlayerRegistry.LocalPlayer.transform.position;
            float magnitude = (position - cargoInstance.transform.position).magnitude;
            Lod lod = null;
            for (int i = 0; i < lctest.LodGroup.Lods.Count; i++)
            {
                Lod lod2 = lctest.LodGroup.Lods[i];
                int? num = (lod != null) ? new int?(lod.CullingDistance) : null;
                float num2 = ((num != null) ? ((float)num.GetValueOrDefault()) : 0f) * LodManager.LOD_BIAS;
                float num3 = (float)lod2.CullingDistance * LodManager.LOD_BIAS;
                bool flag = magnitude > num2;
                bool flag2 = magnitude < num3;
                bool active = flag && flag2;
                Debug.Log("Stranded Deep AlternativeEndgame Mod lod tests " + i + " / " + active);
                lod2.SetActive(active);
                lod = lod2;
            }
        }

        private static void AttachChildrenRecursive(Transform cargo, Transform transform, int level = 0)
        {
            try
            {
                int nextlevel = level++;
                StringBuilder sb = new StringBuilder();
                for (int tab = 0; tab < level; tab++)
                {
                    sb.Append("\t");
                }
                for (var i = transform.childCount; i-- > 0;)
                {
                    GameObject child = transform.GetChild(i).gameObject;
                    Debug.Log("Stranded Deep AlternativeEndgame Mod child object : " + sb.ToString() + child.name);
                    Debug.Log("Stranded Deep AlternativeEndgame Mod child object : " + sb.ToString() + child.GetType().Name);
                    if (!child.name.Contains("LOD"))
                    {
                        child.transform.parent = cargo;
                        child.gameObject.transform.parent = cargo.transform;

                        //AttachChildrenRecursive(cargo, child.transform, nextlevel);

                        //Game.Destroy(child);

                        //SaveableReference[] srs = child.GetComponents<SaveableReference>();
                        //for (var j = srs.Length; j-- > 0;)
                        //{
                        //    Debug.Log("Stranded Deep AlternativeEndgame Mod child object : destroying saveable reference " + sb.ToString() + srs[j].name);
                        //    BeamTeam.Destroy<SaveableReference>(srs[j]);
                        //}
                        //Debug.Log("Stranded Deep AlternativeEndgame Mod child object : destroying child " + sb.ToString() + child.name);
                        //BeamTeam.Destroy<GameObject>(child.gameObject);
                        //BeamTeam.Destroy<GameObject>(child);
                    }
                }
            }
            catch (Exception e)
            {
                Debug.Log("Stranded Deep AlternativeEndgame Mod child object : destroying children failed for " + transform.name);
            }
        }

        private static Vector3 ComputeNextPosition(int currentOriginParam, Vector3 currentPosition, float delta, out Quaternion rotation)
        {
            Vector3 currentPositionLocal = currentPosition;
            //Debug.Log("Stranded Deep AlternativeEndgame Mod currentOrigin : " + currentOriginParam);
            int destinationIndex = (currentOriginParam == positions.Count - 1 ? 0 : currentOriginParam + 1);
            Vector3 destination = positions[destinationIndex];
            //Debug.Log("Stranded Deep AlternativeEndgame Mod destination : " + destination);
            if (Vector3.Distance(currentPositionLocal, destination) <= 5.0f)
            {
                //Debug.Log("Stranded Deep AlternativeEndgame Mod destination approx same as currentPosition");
                //Debug.Log("Stranded Deep AlternativeEndgame Mod new destination index : " + destinationIndex);
                currentOrigin = destinationIndex;
                destinationIndex = (currentOrigin == positions.Count - 1 ? 0 : currentOrigin + 1);
                currentPositionLocal = destination;
                destination = positions[destinationIndex];
            }
            //Debug.Log("Stranded Deep AlternativeEndgame Mod destination : " + destination);
            Vector3 origin = positions[currentOrigin];

            Vector3 direction = Vector3.Normalize(new Vector3(destination.x - origin.x, 0, destination.z - origin.z));
            Vector3 result = new Vector3(direction.x * delta, 0, direction.z * delta);

            rotation = Quaternion.LookRotation(direction);

            return currentPositionLocal + result;
        }

        private static void Reset()
        {
            worldLoaded = false;
            _lastTick = DateTime.MinValue;
            _playEndgame = DateTime.MaxValue;
            cargoInstance = null;
            if (previousFlareGun != null)
            {
                previousFlareGun.Used.RemoveListener(ShootFlare);
            }
            previousFlareGun = null;
        }

        private static DateTime _playEndgame = DateTime.MaxValue;
        private static InteractiveObject_FLAREGUN previousFlareGun = null;
        private static void ShootFlare(IBase arg0, IBaseActionEventData arg1)
        {
            Debug.Log("Stranded Deep AlternativeEndgame Mod : flare gun shot check cargo distance");
            if (cargoInstance == null)
            {
                Debug.Log("Stranded Deep AlternativeEndgame Mod : flare gun shot cargo not found");
                return;
            }

            float distance = Vector3.Distance(previousFlareGun.transform.position, cargoInstance.transform.position);
            Debug.Log("Stranded Deep AlternativeEndgame Mod : flare gun shot distance = " + distance);
            if (distance <= Parameters.CARGOCHECKDISTANCE)
            {
                _playEndgame = DateTime.Now.AddSeconds(5);
            }
        }

        private static void CheckEndgameConditions()
        {
            foreach (IPlayer player in PlayerRegistry.AllPlayers)
            {
                if (player.Holder.CurrentObject is InteractiveObject_FLAREGUN)
                {
                    InteractiveObject_FLAREGUN flaregun = player.Holder.CurrentObject as InteractiveObject_FLAREGUN;
                    //FieldInfo fi_onUseEmpty = typeof(InteractiveObject_FLAREGUN).GetField("_onUseEmpty", BindingFlags.NonPublic | BindingFlags.Instance);
                    if (!System.Object.ReferenceEquals(previousFlareGun, flaregun))
                    {
                        if (previousFlareGun != null)
                        {
                            Debug.Log("Stranded Deep AlternativeEndgame Mod : changed flare gun");
                            //UnityEvent previousFlareShot = fi_onUseEmpty.GetValue(previousFlareGun) as UnityEvent;
                            //previousFlareShot.RemoveListener(ShootFlare);
                            previousFlareGun.Used.RemoveListener(ShootFlare);
                        }
                    }
                    else
                    {
                        continue;
                    }
                    Debug.Log("Stranded Deep AlternativeEndgame Mod : registering flare gun shot event");
                    //UnityEvent flareShot = fi_onUseEmpty.GetValue(flaregun) as UnityEvent;
                    //flareShot.AddListener(ShootFlare);
                    flaregun.Used.AddListener(ShootFlare);
                    previousFlareGun = flaregun;
                }
            }
        }

        public static SaveablePrefab Create(uint prefabId, Vector3 position)
        {
            string text;
            bool flag = Prefabs.TryGetMultiplayerPrefabName(prefabId, out text);
            if (!flag)
            {
                SaveablePrefab result = MultiplayerMng.Instantiate<SaveablePrefab>(prefabId, position, Quaternion.identity, MiniGuid.New(), null);
                new ReplicateCreate
                {
                    PrefabId = (short)prefabId,
                    Pos = position
                }.Post();
                return result;
            }
            if (Game.Mode.IsClient())
            {
                new ReplicateCreate
                {
                    PrefabId = (short)prefabId,
                    Pos = position
                }.Post();
                return null;
            }
            return MultiplayerMng.Instantiate<SaveablePrefab>(prefabId, position, Quaternion.identity, MiniGuid.New(), null);
        }

        private class ReplicateCreate : MultiplayerMessage
        {
            // Token: 0x06005F5C RID: 24412 RVA: 0x00109DC4 File Offset: 0x00107FC4
            public override void OnPeer()
            {
                MultiplayerMng.Instantiate<SaveablePrefab>((uint)this.PrefabId, this.Pos, Quaternion.identity, MiniGuid.New(), null);
            }

            // Token: 0x04003CA7 RID: 15527
            [Replicate]
            public short PrefabId;

            // Token: 0x04003CA8 RID: 15528
            [Replicate]
            public Vector3 Pos;
        }

        private static void Instance_WorldGenerated()
        {
            Debug.Log("Stranded Deep AlternativeEndgame Mod : World Loaded event");
            worldLoaded = true;
        }

        private static void ReadConfig()
        {
            string dataDirectory = FilePath.SAVE_FOLDER;//System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData).Replace("Local", "LocalLow"), @"Beam Team Games\Stranded Deep\Data\");
            if (System.IO.Directory.Exists(dataDirectory))
            {
                string configFilePath = System.IO.Path.Combine(dataDirectory, configFileName);
                if (System.IO.File.Exists(configFilePath))
                {
                    string[] config = System.IO.File.ReadAllLines(configFilePath);
                    foreach (string line in config)
                    {
                        string[] tokens = line.Split(new string[] { "=", ";" }, StringSplitOptions.RemoveEmptyEntries);
                        if (tokens.Length == 2)
                        {
                            //if (tokens[0].Contains("revealWorld"))
                            //{
                            //    revealWorld = bool.Parse(tokens[1]);
                            //}
                        }
                    }
                }
            }
        }

        private static void WriteConfig()
        {
            string dataDirectory = FilePath.SAVE_FOLDER;//System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData).Replace("Local", "LocalLow"), @"Beam Team Games\Stranded Deep\Data\");
            if (System.IO.Directory.Exists(dataDirectory))
            {
                string configFilePath = System.IO.Path.Combine(dataDirectory, configFileName);
                StringBuilder sb = new StringBuilder();
                //sb.AppendLine("revealWorld=" + revealWorld + ";");

                System.IO.File.WriteAllText(configFilePath, sb.ToString(), Encoding.UTF8);
            }
        }

        private static void PlayEngameVideo()
        {
            try
            {
                if (Camera.main == null)
                {
                    Debug.Log("Stranded Deep AlternativeEndgame Mod : PlayEngameVideo no main camera found");
                    return;
                }

                EventManager.RaiseEvent<EndGameSequenceEvent>(new EndGameSequenceEvent());
                EventManager.RaiseEvent<FreezeNotificationsEvent>(new FreezeNotificationsEvent(true));
                foreach (IPlayer player in PlayerRegistry.AllPlayers)
                {
                    if (player.IsOwner)
                    {
                        player.Input.SetAndCacheMapsEnabled(false, 0);
                        player.Input.SetAndCacheMapsEnabled(true, 10);
                    }
                    player.Character.HideCurrentItem();
                    FreezePlayer(player);
                    player.PlayerCamera.CameraMovement.SetRotation(player.Character.CharacterFirstPerson.CameraRigPosition);
                    player.PlayerCamera.CameraMovement.SetCameraTarget(player.Character.CharacterFirstPerson.CameraRigPosition);
                    player.PlayerCamera.MouseLook.enabled = false;
                }

                Singleton<GameTime>.Instance.MilitaryTime_NoEvents = 16f;
                Singleton<GameTime>.Instance.Paused = true;
                Timing.WaitForSeconds(0.5f);

                // Will attach a VideoPlayer to the main camera.
                //GameObject camera = GameObject.Find("Main Camera");
                GameObject camera = Camera.main.gameObject;

                // VideoPlayer automatically targets the camera backplane when it is added
                // to a camera object, no need to change videoPlayer.targetCamera.
                VideoPlayer videoPlayer = camera.AddComponent<VideoPlayer>();

                // Play on awake defaults to true. Set it to false to avoid the url set
                // below to auto-start playback since we're in Start().
                videoPlayer.playOnAwake = false;

                // By default, VideoPlayers added to a camera will use the far plane.
                // Let's target the near plane instead.
                videoPlayer.renderMode = VideoRenderMode.CameraNearPlane;

                videoPlayer.aspectRatio = VideoAspectRatio.Stretch;

                videoPlayer.playbackSpeed = 0.8f;

                // This will cause our Scene to be visible through the video being played.
                videoPlayer.targetCameraAlpha = 1.0f;// 0.5F;

                // Set the video to play. URL supports local absolute or relative paths.
                // Here, using absolute.
                videoPlayer.url = @"file://" + videoFileName;
                Debug.Log("Stranded Deep AlternativeEndgame Mod : PlayEngameVideo video url = " + videoPlayer.url);

                // Skip the first 100 frames.
                //videoPlayer.frame = 100;

                // Restart from beginning when done.
                videoPlayer.isLooping = false;

                // Each time we reach the end, we slow down the playback by a factor of 10.
                videoPlayer.loopPointReached += EndReached;

                // Start playback. This means the VideoPlayer may have to prepare (reserve
                // resources, pre-load a few frames, etc.). To better control the delays
                // associated with this preparation one can use videoPlayer.Prepare() along with
                // its prepareCompleted event.
                Debug.Log("Stranded Deep AlternativeEndgame Mod : PlayEngameVideo start play");
                videoPlayer.Play();

            }
            catch (Exception e)
            {
                Debug.Log("Stranded Deep AlternativeEndgame Mod : error in PlayEngameVideo : " + e);
            }
        }

        private static void EndReached(UnityEngine.Video.VideoPlayer vp)
        {
            Debug.Log("Stranded Deep AlternativeEndgame Mod : PlayEngameVideo video ended");

            return;
            //vp.playbackSpeed = vp.playbackSpeed / 10.0F;
            // show credits
            EndGameCreditsController ecc = Game.FindObjectOfType<EndGameCreditsController>();
            if (ecc != null)
            {
                ecc.Show();
            }
        }

        private static void ShowEndgameVideoCanvas()
        {
            if (modCanvas == null)
            {
                modCanvas = createCanvas(false, "AlternativeEndgameCanvas");

                //Font defaultFont = Resources.GetBuiltinResource(typeof(Font), "Arial.ttf") as Font;
                //GameObject textColdGO = new GameObject("ColdMod_Text_Sprite");
                //textColdGO.transform.SetParent(modCanvas.transform);
                //debugText = textColdGO.AddComponent<Text>();
                //debugText.horizontalOverflow = HorizontalWrapMode.Wrap;
                //debugText.verticalOverflow = VerticalWrapMode.Overflow;
                //debugText.alignment = TextAnchor.MiddleCenter;
                //debugText.font = defaultFont;
                //debugText.color = Color.red;// new Color(0.3f, 0.1f, 0f, 0.95f);
                //debugText.fontSize = 10;
                //debugText.text = "";
                //debugText.rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 250);
                //debugText.rectTransform.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 750);
                //debugText.rectTransform.localPosition = new Vector3(0, 200);//new Vector3(bgRpgGO.GetComponent<RectTransform>().anchoredPosition.x, bgRpgGO.GetComponent<RectTransform>().anchoredPosition.y);

                ////GameObject textGO = CreateText(canvas.transform, 0, 0, "Hello world", 32, Color.red);
                ////textGO.GetComponent<RectTransform>().anchoredPosition = Vector2.zero;
                ///

            }
            else
            {
                //if (debugText != null)
                //    debugText.enabled = showDebugText;
                modCanvas.SetActive(alternativeEndingCanvasVisible);
            }
        }

        #region Canvas instanciation

        //Creates Hidden GameObject and attaches Canvas component to it
        private static GameObject createCanvas(bool hide, string name = "AlternativeEndgameCanvas")
        {
            //Create Canvas GameObject
            GameObject tempCanvas = new GameObject(name);
            if (hide)
            {
                tempCanvas.hideFlags = HideFlags.HideAndDontSave;
            }

            //Create and Add Canvas Component
            Canvas cnvs = tempCanvas.AddComponent<Canvas>();
            cnvs.renderMode = RenderMode.ScreenSpaceOverlay;
            cnvs.pixelPerfect = false;

            //Set Cavas sorting order to be above other Canvas sorting order
            cnvs.sortingOrder = 12;

            cnvs.targetDisplay = 0;

            addCanvasScaler(tempCanvas);
            addGraphicsRaycaster(tempCanvas);
            return tempCanvas;
        }

        //Adds CanvasScaler component to the Canvas GameObject 
        private static void addCanvasScaler(GameObject parentaCanvas)
        {
            CanvasScaler cvsl = parentaCanvas.AddComponent<CanvasScaler>();
            cvsl.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            cvsl.referenceResolution = new Vector2(alternativeEndingCanvasDefaultScreenWidth, alternativeEndingCanvasDefaultScreenHeight);

            cvsl.matchWidthOrHeight = 0.5f;
            cvsl.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
            cvsl.referencePixelsPerUnit = 100f;
        }

        //Adds GraphicRaycaster component to the Canvas GameObject 
        private static void addGraphicsRaycaster(GameObject parentaCanvas)
        {
            GraphicRaycaster grcter = parentaCanvas.AddComponent<GraphicRaycaster>();
            grcter.ignoreReversedGraphics = true;
            grcter.blockingObjects = GraphicRaycaster.BlockingObjects.None;
        }

        #endregion

        public static byte[] ExtractResource(String filename)
        {
            System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly();
            using (System.IO.Stream resFilestream = a.GetManifestResourceStream(filename))
            {
                if (resFilestream == null) return null;
                byte[] ba = new byte[resFilestream.Length];
                resFilestream.Read(ba, 0, ba.Length);
                return ba;
            }
        }
    }
}
